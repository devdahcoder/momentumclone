{"version":3,"sources":["momentumComponents/weather.js","momentumComponents/time.js","momentumComponents/nameInput.js","momentumComponents/greeting.js","momentumComponents/TodoItem.js","momentumComponents/TodoList.js","momentumComponents/Input.js","App.js","serviceWorker.js","index.js"],"names":["weather","location","icon","locationTemperature","src","alt","time","getAmPm","getHour","getMinute","addZero","nameInput","name","nameCondition","handleNameValue","handleBlur","handleDoubleClick","onSubmit","value","contentEditable","onChange","onKeyPressCapture","onKeyDown","onBlur","onDoubleClick","greeting","TodoItem","item","handleDeleteTodo","markTodo","id","completed","style","textDecoration","type","onClick","TodoList","todo","todoComplete","display","length","map","key","Input","inputValue","handleTodoInput","handleTodoSubmit","action","htmlFor","App","useState","setIcon","setLocation","setLocationTemperature","setAmPm","setHour","setMinute","setGreeting","setName","setNameCondition","setTodo","setInputValue","useEffect","storageName","JSON","parse","localStorage","getItem","setItem","stringify","storageTodo","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","url","fetch","then","response","json","data","console","log","clouds","sys","country","all","catch","interval","setInterval","getDay","Date","getHours","getMinutes","clearInterval","hour","greetings","e","target","preventDefault","newTodo","uuid","alert","filter","items","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3c797486.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst weather = ({\r\n    location, \r\n    icon, \r\n    locationTemperature, \r\n}) => {\r\n    return (\r\n      <div>\r\n        <img src={icon} alt={icon} />\r\n        {location}\r\n        {locationTemperature}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default weather\r\n","import React from \"react\";\r\n\r\nconst time = ({getAmPm, getHour, getMinute}) => {\r\n\r\n  const addZero = getMinute < 10 ? `0${getMinute}`: `${getMinute}`;\r\n\r\n    return (\r\n      <div>\r\n        {getHour}:{addZero}, {getAmPm}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default time;","import React from 'react'\r\nimport \"./momentum.css\"\r\nconst nameInput = ({\r\n  name,\r\n  nameCondition,\r\n  handleNameValue,\r\n  handleBlur,\r\n  handleDoubleClick,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <span\r\n        onSubmit={handleBlur}\r\n        value={name}\r\n        contentEditable={nameCondition}\r\n        onChange={handleNameValue}\r\n        onKeyPressCapture={handleNameValue}\r\n        onKeyDown={handleNameValue}\r\n        onBlur={handleBlur}\r\n        onDoubleClick={handleDoubleClick}\r\n      >\r\n        {name}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default nameInput\r\n","import React from \"react\";\r\nimport NameInput from \"./nameInput\";\r\n\r\nconst greeting = ({\r\n    greeting, \r\n    nameCondition, \r\n    name, \r\n    // handleNameValue,\r\n    handleBlur,\r\n    handleDoubleClick\r\n    \r\n}) => {\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <span>\r\n        {greeting}\r\n          <NameInput\r\n            name={name}\r\n            nameCondition={nameCondition}\r\n            // handleNameValue={handleNameValue}\r\n            handleBlur={handleBlur}\r\n            handleDoubleClick={handleDoubleClick}\r\n          />\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default greeting;\r\n","import React from 'react'\r\n\r\nconst TodoItem = ({ item, handleDeleteTodo, markTodo }) => {\r\n\r\n\r\n    \r\n\r\n    const {id, value, completed} = item;\r\n  return (\r\n    <div>\r\n      <span style={{textDecoration: completed ? \"line-through\" : \"none\"}}>\r\n        <input type=\"checkbox\" name=\"\" id=\"\" onClick={() => markTodo(id)} />\r\n        {value} <button onClick={() => handleDeleteTodo(id)}>Delete</button>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem\r\n","import React from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodoList = ({\r\n  todo,\r\n  handleDeleteTodo,\r\n  markTodo,\r\n  todoComplete\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div style={{ display: todo.length === 0 ? \"none\" : \"block\" }}>Today</div>\r\n      {todo.map((item) => (\r\n        <TodoItem\r\n          key={item.id}\r\n          item={item}\r\n          handleDeleteTodo={handleDeleteTodo}\r\n          markTodo={markTodo}\r\n          todoComplete={todoComplete}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\n\r\nconst Input = ({ inputValue, handleTodoInput, handleTodoSubmit, todo }) => {\r\n  return (\r\n    <div style={{display: todo.length === 4 ? \"none\" : \"block\"}}>\r\n      <form action=\"\" onSubmit={handleTodoSubmit}>\r\n      <label htmlFor=\"\">What is your main Focus today</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"\"\r\n          id=\"\"\r\n          onChange={handleTodoInput}\r\n          value={inputValue}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input\r\n","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\"\nimport Weather from \"./momentumComponents/weather\";\nimport Time from \"./momentumComponents/time\";\nimport Greeting from \"./momentumComponents/greeting\";\nimport TodoList from \"./momentumComponents/TodoList\";\nimport Input from \"./momentumComponents/Input\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction App() {\n\n    \n    const [icon, setIcon] = useState('');\n    const [location, setLocation] = useState('');\n    const [locationTemperature, setLocationTemperature] = useState('');\n    const [getAmPm, setAmPm] = useState(\"\");\n    const [getHour, setHour] = useState(\"\");\n    const [getMinute, setMinute] = useState(\"\");\n    const [greeting, setGreeting] = useState(\"\");\n    const [name, setName] = useState(\"Dele\");\n\n    // please contribute if you have an idea how to get value \n    // of an editable content and YES i tried using String.fromCharCode\n\n    // const [nameValue, setNameValue] = useState(\"\");\n    const [nameCondition, setNameCondition] = useState(true); \n    const [todo, setTodo] = useState([]);\n    const [inputValue, setInputValue] = useState(\"\");\n\n\n\n\n\n\n    // get name from local storage\n    useEffect(() => {\n      const storageName = JSON.parse(localStorage.getItem(\"name\"))\n      if (storageName) {\n        setName(storageName)\n      }\n    }, [])\n\n\n\n\n\n    // set name to local storage\n    useEffect(() => {\n      localStorage.setItem(\"name\", JSON.stringify(name));\n    }, [name]);\n\n\n\n\n    // get Todo from local storage\n    useEffect(() => {\n      const storageTodo = JSON.parse(localStorage.getItem(\"todo\"))\n      if (storageTodo) {\n        setTodo(storageTodo)\n      }\n    }, [])\n\n\n\n\n    // set Todo to local Storage\n    useEffect(() => {\n      localStorage.setItem(\"todo\", JSON.stringify(todo));\n    }, [todo]);\n\n\n\n\n    // get user location and give weather update\n\n    const getUserLocation = () => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const { latitude, longitude } = position.coords;\n\n            let url = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=your API_KEY goes here`;\n\n            fetch(url)\n              .then((response) => response.json())\n              .then((data) => {\n                console.log(data);\n                const { name, clouds, sys, weather } = data;\n                setIcon(\n                  `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`\n                );\n                setLocation(`${name}, ${sys.country}`);\n                setLocationTemperature(`${clouds.all}`);\n              })\n              .catch(() => {\n                console.log(\"Something went wrong\");\n              });\n          },\n          () => {\n            console.log(\"your browser does not support it\");\n          }\n        );\n        \n    }\n\n    useEffect(() => {\n      getUserLocation();\n    }, []);\n\n\n\n\n\n    //give user time \n    useEffect(() => {\n      const interval = setInterval(() => {\n        const getDay = new Date();\n\n        const getHour = getDay.getHours();\n        const getMinute = getDay.getMinutes();\n\n        const amPm = getHour >= 12 ? \"PM\" : \"AM\";\n        setAmPm(amPm);\n\n        const hour = getHour % 12 || 12;\n        setHour(hour);\n\n        setMinute(getMinute);\n      }, 1000);\n      return () => clearInterval(interval)\n    }, [])\n\n\n\n\n\n\n\n\n    // tell what time of the day if it is morning afternoon or evening\n    const greetings = () => {\n      let todayGreeting = new Date();\n\n      let hour = todayGreeting.getHours();\n\n      if (hour < 12) {\n        setGreeting(\"Good morning,\");\n      } else if (hour < 15) {\n        setGreeting(\"Good afternoon,\");\n      } else {\n        setGreeting(\"Good evening,\");\n      }\n    };\n    \n    useEffect(() => {\n      greetings();\n    }, [])\n\n\n\n\n    //handle todo input\n    const handleTodoInput = (e) => {\n      setInputValue(e.target.value);\n    }\n\n\n\n\n    // handle submit for todo\n    const handleTodoSubmit = (e) => {\n      e.preventDefault();\n      if (inputValue !== \"\") {\n        const newTodo = {id: uuid(), value: inputValue, completed: false};\n        setTodo([newTodo, ...todo]);\n      } else {\n        alert(\"cant happen\")\n      }\n\n      setInputValue(\"\");\n      \n    }\n\n\n\n\n    // handle deleting todo\n    const handleDeleteTodo = (id) => {\n      const newTodo = todo.filter((todo) => id !== todo.id);\n      setTodo(newTodo)\n    }\n\n\n\n\n    // handle condition if todo is checked\n    const markTodo = (id) => {\n      setTodo(\n        todo.map((items) => {\n          if (items.id === id) {\n            return {\n              ...items, completed: !items.completed\n            }\n          }\n          return items;\n        })\n      );\n    }\n\n\n    // const handleNameValue = (e) => {\n    //   setNameValue(String.fromCharCode(e.keyCode));\n    //   console.log(String.fromCharCode(e.keyCode));\n    // }\n\n\n\n\n    // set editable content (name) to false onBlur\n    const handleBlur = () => {\n      setNameCondition(\"false\");\n    }\n\n\n\n    \n    // set editable content (name) to true onDoubleClick\n    const handleDoubleClick = () => {\n      setNameCondition(\"true\");\n    }\n\n    \n    // main return area\n    return (\n      <div>\n        <Weather\n          icon={icon}\n          location={location}\n          locationTemperature={locationTemperature}\n        />\n\n        <Time \n          getAmPm={getAmPm} \n          getMinute={getMinute} \n          getHour={getHour} \n        />\n\n        <Input\n          inputValue={inputValue}\n          handleTodoInput={handleTodoInput}\n          handleTodoSubmit={handleTodoSubmit}\n          todo={todo}\n        />\n\n        <Greeting\n          greeting={greeting}\n          nameCondition={nameCondition}\n          // handleNameValue={handleNameValue}\n          name={name}\n          handleBlur={handleBlur}\n          handleDoubleClick={handleDoubleClick}\n        />\n\n        <TodoList\n          todo={todo}\n          inputValue={inputValue}\n          handleTodoInput={handleTodoInput}\n          handleTodoSubmit={handleTodoSubmit}\n          handleDeleteTodo={handleDeleteTodo}\n          markTodo={markTodo}\n        />\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}